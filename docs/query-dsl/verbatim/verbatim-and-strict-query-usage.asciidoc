:ref_current: https://www.elastic.co/guide/en/elasticsearch/reference/master

:github: https://github.com/elastic/elasticsearch-net

:nuget: https://www.nuget.org/packages

[[verbatim-and-strict-query-usage]]
== Verbatim And Strict Query Usage

`IsVerbatim` should be set on individual queries to take effect 

=== Fluent DSL Example

[source,csharp]
----
q
.Bool(b => b
    .Must(qt => qt
        .Term(t => t
            .Verbatim()
            .Field(p => p.Description)
            .Value("")
        ), qt => qt
        .Term(t => t
            .Field(p => p.Name)
            .Value("foo")
        )
    )
)
----

=== Object Initializer Syntax Example

[source,csharp]
----
new TermQuery
{
    IsVerbatim = true,
    Field = "description",
    Value = ""
}
&& new TermQuery
{
    Field = "name",
    Value = "foo"
}
----

[source,javascript]
.Example json output
----
{
  "bool": {
    "must": [
      {
        "term": {
          "description": {
            "value": ""
          }
        }
      },
      {
        "term": {
          "name": {
            "value": "foo"
          }
        }
      }
    ]
  }
}
----

Setting `IsVerbatim` on a compound query is still supported though 

=== Fluent DSL Example

[source,csharp]
----
q
.Bool(b => b
    .Verbatim()
)
----

=== Object Initializer Syntax Example

[source,csharp]
----
new BoolQuery
{
    IsVerbatim = true,
}
----

[source,javascript]
.Example json output
----
{
  "bool": {}
}
----

=== Fluent DSL Example

[source,csharp]
----
q
.Term(t => t
    .Verbatim()
    .Field(p => p.Description)
    .Value("")
)
----

=== Object Initializer Syntax Example

[source,csharp]
----
new TermQuery
{
    IsVerbatim = true,
    Field = "description",
    Value = ""
}
----

[source,javascript]
.Example json output
----
{
  "term": {
    "description": {
      "value": ""
    }
  }
}
----

=== Fluent DSL Example

[source,csharp]
----
q
.Bool(b => b
    .Filter(f => !f
        .Term(t => t
            .Verbatim()
            .Field(p => p.Name)
            .Value("")
        ) && f
        .Exists(e => e
            .Field(p => p.NumberOfCommits)
        )
    )
)
----

=== Object Initializer Syntax Example

[source,csharp]
----
new BoolQuery
{
    Filter = new QueryContainer[] {
        !new TermQuery
        {
            IsVerbatim = true,
            Field = "name",
            Value = ""
        } &&
        new ExistsQuery
        {
            Field = "numberOfCommits"
        }
    }
}
----

[source,javascript]
.Example json output
----
{
  "bool": {
    "filter": [
      {
        "bool": {
          "must": [
            {
              "exists": {
                "field": "numberOfCommits"
              }
            }
          ],
          "must_not": [
            {
              "term": {
                "name": {
                  "value": ""
                }
              }
            }
          ]
        }
      }
    ]
  }
}
----

[source,csharp]
----
var e = Assert.Throws<ArgumentException>(() =>
    new SearchRequest<Project>
    {
        Query = new TermQuery
        {
            IsStrict = true,
            Field = "myfield",
            Value = ""
        }
    }
);

e.Message.Should().Be("Query is conditionless but strict is turned on");
----

[source,csharp]
----
var e = Assert.Throws<ArgumentException>(() =>
    new SearchDescriptor<Project>()
        .Query(q => q
            .Term(t => t
                .Strict()
                .Field("myfield")
                .Value("")
            )
        )
);
e.Message.Should().Be("Query is conditionless but strict is turned on");
----

